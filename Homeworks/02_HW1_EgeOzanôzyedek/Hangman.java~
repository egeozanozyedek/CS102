import java.io.File;
import java.util.Scanner;
import java.io.LineNumberReader;
import java.io.FileReader;

/**
 * Hangman class, where the game hangman is being played by getting an input from the user and putting it into tryThis()
 * and choosing the secret word with chooseSecretWord(). 
 * @author Ege Ozan Özyedek
 * @date 7/02/2018
 * @version 2.0
 */
public class Hangman {
  
  //properties
  private StringBuffer secretWord;
  private StringBuffer allLetters;
  private StringBuffer usedLetters;
  private StringBuffer knownSoFar;
  private int numberOfIncorrectTries;
  private int maxAllowedIncorrectTries;
  
  //constructors
  
  /**
   * Class Constructor
   * No parameters
   * Empty body (should be filled)
   */
  public Hangman() {
    secretWord = new StringBuffer( chooseSecretWord() );
    allLetters = new StringBuffer( "abcdefghijklmnopqrstuvwxyz" );
    usedLetters = new StringBuffer( "" );
    knownSoFar = new StringBuffer( "" );
    numberOfIncorrectTries = 0;
    maxAllowedIncorrectTries = 6;
    
    // hide the secret word by stars
    for ( int i = 0 ; i < secretWord.length() ; i++ ) {
      knownSoFar.append( "*" );  
    }
  }
  //methods
  
  public String getSecretWord() {
    return secretWord + "";
  }
  
  /**
   * This method is used to get all letters that can be used. 
   * @return all letters that can be used to predict the secret word.
   */
  public String getAllLetters() {
    return allLetters.toString();
  }
  
  /**
   * This method is used to get already tried letters.
   * @return letters that have been tried by the user.
   */
  public String getUsedLetters() {
    return usedLetters.toString();
  }
  
  /**
   * This method is used to get the number of incorrect tries.
   * @return the number of incorrect tries that user has made.
   */
  public int getNumOfIncorrectTries() {
    return numberOfIncorrectTries;
  }
  
  /**
   * This method is used to get maximum allowed number of incorrect tries.
   * @return the integer value of maximum allowed incorrect tries.
   */
  public int getMaxAllowedIncorrectTries() {
    return maxAllowedIncorrectTries;
  }
  
  /**
   * This method is used to get known part of the secret word.
   * @return the known part of the secret word.
   */
  public String getKnownSoFar() {
    return knownSoFar.toString();
  }
  
  /**
   * This method is used to determine whether the game is over or not.
   * @return true if the game is over.
   */
  public boolean isGameOver() {
    return  knownSoFar.toString().equals( secretWord.toString() ) 
      || ( numberOfIncorrectTries >= maxAllowedIncorrectTries );
  }
  
  /**
   * This method is used to determine whether the user has lost or not.
   * @return true if the user has lost the game.
   */
  public boolean hasLost() {
    return numberOfIncorrectTries >= maxAllowedIncorrectTries;
  }
  
  
  private StringBuffer chooseSecretWord (){
    //constants
    final String DICTIONARY_NAME = "words.txt";
    
    //variables
    StringBuffer resultWord = null;
    
    //program code
    try {
      //variables
      String selectedWord;
      File myFile;
      Scanner scan;
      //use LineNumberReader to find the length of the file
      LineNumberReader lineNumberReader;
      
      //initialize
      myFile = new File(DICTIONARY_NAME);
      scan = new Scanner ( myFile );
      lineNumberReader = new LineNumberReader(new FileReader ( myFile ) );
      
      //jump to the bottom of the file, and find how many lines it is
      lineNumberReader.skip( Long.MAX_VALUE );
      int lines = lineNumberReader.getLineNumber();
      lineNumberReader.close();
      
      int randomLine = (int) ( lines * Math.random() );
      
      selectedWord = "";
      //find the randomly selected word
      for ( int i = 0; i < randomLine; i++){
        selectedWord = scan.nextLine();
      }
      
      resultWord = new StringBuffer( selectedWord );
      
    } catch (Exception e) {
      
      System.out.println( "Exception occured: " + e.getMessage());
      
    }
    return resultWord;
  }
  
  /**
   * This method is used to try the input letter and see whether if it
   * was used before and to check if it is in the secret word or not
   * @param letter, the input letter that will be checked in the method
   * @return ints which explain what happened in the method
   */ 
  public int tryThis( String letter ){
    //variables
    int count;
    int result;
    
    //program code
    count = 0;
    result = 0;
    
    //if there is an instance of the letter in the usedLetters, then the method will return -2 
    if (usedLetters.indexOf( letter ) != -1){
      result = -2;
    }
    
    //else if the game is over then the method will return -3
    else if ( isGameOver() ){
      result = -3;
    }
    
    //else if the letter is in the secretWord it  will fall into this condition
    else if( secretWord.indexOf( letter ) != -1 ){
      
      //this for loop will check every letter on the secretWord and will replace "*" with the corresponding letter
      for ( int i = 0; i < secretWord.length(); i++ ){
        if ( secretWord.substring( i, i + 1 ).equals( letter ) ){
          knownSoFar.replace( i, i + 1, letter );
          count++;
        }
      }
      result = count;
    }
    
    //else the code will fall into this condition, which will increase the incorrect tries and will return -1
    else{
      numberOfIncorrectTries++;
      result = -1;
    }
    //this if is here so that if -2 is the result from the conditions(meaningthe letter is in the usedLetters already) 
    //it wont add the letter again
    if ( result != -2 )
      usedLetters.append( letter );
    
    return result;
  }
}
